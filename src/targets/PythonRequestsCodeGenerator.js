// Generated by CoffeeScript 1.12.7
const Mustache = require("mustache");
const URI = require("URIjs");

const addslashes = function (str) {
  return `${str}`.replace(/[\\"]/g, "\\$&");
};

const urlTransform = function (request) {
  var name, url_params, url_params_object, value;
  url_params_object = (function () {
    var _uri;
    _uri = URI(request.url);
    return _uri.search(true);
  })();
  url_params = (function () {
    var results;
    results = [];
    for (name in url_params_object) {
      value = url_params_object[name];
      results.push({
        name: addslashes(name),
        value: addslashes(value),
      });
    }
    return results;
  })();
  return {
    base: addslashes(
      (function () {
        var _uri;
        _uri = URI(request.url);
        _uri.search("");
        return _uri;
      })()
    ),
    params: url_params,
    has_params: url_params.length > 0,
  };
};

const headersTransform = function (request) {
  var header_name, header_value, headers;
  headers = request.headers;
  return {
    has_headers: Object.keys(headers).length > 0,
    header_list: (function () {
      var results;
      results = [];
      for (header_name in headers) {
        header_value = headers[header_name];
        results.push({
          header_name: addslashes(header_name),
          header_value: addslashes(header_value),
        });
      }
      return results;
    })(),
  };
};

const bodyTransform = function (request) {
  var json_body, multipart_body, name, raw_body, url_encoded_body, value;
  json_body = request.jsonBody;
  if (json_body) {
    return {
      has_json_body: true,
      json_body_object: json_body_object(json_body, 2),
    };
  }
  url_encoded_body = request.urlEncodedBody;
  if (url_encoded_body) {
    return {
      has_url_encoded_body: true,
      url_encoded_body: (function () {
        var results;
        results = [];
        for (name in url_encoded_body) {
          value = url_encoded_body[name];
          results.push({
            name: addslashes(name),
            value: addslashes(value),
          });
        }
        return results;
      })(),
    };
  }
  multipart_body = request.multipartBody;
  if (multipart_body) {
    return {
      has_multipart_body: true,
      multipart_body: (function () {
        var results;
        results = [];
        for (name in multipart_body) {
          value = multipart_body[name];
          results.push({
            name: addslashes(name),
            value: addslashes(value),
          });
        }
        return results;
      })(),
    };
  }
  raw_body = request.body;
  if (raw_body) {
    if (raw_body.length < 5000) {
      return {
        has_raw_body: true,
        raw_body: addslashes(raw_body),
      };
    } else {
      return {
        has_long_body: true,
      };
    }
  }
};

const json_body_object = function (object, indent = 0) {
  var indent_str, indent_str_children, key, s, value;
  if (object === null) {
    s = "None";
  } else if (typeof object === "string") {
    s = `\"${addslashes(object)}\"`;
  } else if (typeof object === "number") {
    s = `${object}`;
  } else if (typeof object === "boolean") {
    s = `${object ? "True" : "False"}`;
  } else if (typeof object === "object") {
    indent_str = Array(indent + 2).join("    ");
    indent_str_children = Array(indent + 3).join("    ");
    if (object.length != null) {
      s =
        "[\n" +
        function () {
          var i, len, results;
          results = [];
          for (i = 0, len = object.length; i < len; i++) {
            value = object[i];
            results.push(
              `${indent_str_children}${json_body_object(value, indent + 1)}`
            );
          }
          return results;
        }
          .call(this)
          .join(",\n") +
        `\n${indent_str}]`;
    } else {
      s =
        "{\n" +
        function () {
          var results;
          results = [];
          for (key in object) {
            value = object[key];
            results.push(
              `${indent_str_children}\"${addslashes(key)}\": ${json_body_object(
                value,
                indent + 1
              )}`
            );
          }
          return results;
        }
          .call(this)
          .join(",\n") +
        `\n${indent_str}}`;
    }
  }
  return s;
};

exports.generate = function (request) {
  const url = urlTransform(request);
  const view = {
    request: request,
    method: request.method.toLowerCase(),
    url: url,
    headers: headersTransform(request),
    body: bodyTransform(request),
    headline: `${request.method.toUpperCase()} ${url.base}`,
    version: metadata.version
  };
  return Mustache.render(codeTemplate, view);
};

const metadata = {
  name: "Python Request",
  fileExtension: "py",
  identifier: "com.proxyman.plugin.PythonRequestGenerator",
  author: "Paw and Proxyman",
  version: "1.0.0",
};

// Inlcude a template because we could not build require("fs") in webpack

const codeTemplate = `import requests
{{#body.has_json_body}}
import json
{{/body.has_json_body}}

# Proxyman Code Generator ({{{version}}}): Python + Request
# {{{headline}}}

def send_request():
    try:
        response = requests.{{{method}}}(
            url="{{{url.base}}}",
        {{#url.has_params}}
            params={
            {{#url.params}}
                "{{{name}}}": "{{{value}}}",
            {{/url.params}}
            },
            {{/url.has_params}}
            {{#headers.has_headers}}
            headers={
                {{#headers.header_list}}
                "{{{header_name}}}": "{{{header_value}}}",
                {{/headers.header_list}}
            },
            {{/headers.has_headers}}
            {{#body.has_raw_body}}
            data="{{{body.raw_body}}}"
            {{/body.has_raw_body}}
            {{#body.has_long_body}}
            data=""  # set your body string
            {{/body.has_long_body}}
            {{#body.has_url_encoded_body}}
            data={
            {{#body.url_encoded_body}}
                "{{{name}}}": "{{{value}}}",
            {{/body.url_encoded_body}}
            },
            {{/body.has_url_encoded_body}}
            {{#body.has_multipart_body}}
            files={
            {{#body.multipart_body}}
                "{{{name}}}": "{{{value}}}",
            {{/body.multipart_body}}
            },
            {{/body.has_multipart_body}}
            {{#body.has_json_body}}
            data=json.dumps({{{body.json_body_object}}})
            {{/body.has_json_body}}
        )
        print('Response HTTP Status Code: {status_code}'.format(
            status_code=response.status_code))
        print('Response HTTP Response Body: {content}'.format(
            content=response.content))
    except requests.exceptions.RequestException:
        print('HTTP Request failed')
`;
